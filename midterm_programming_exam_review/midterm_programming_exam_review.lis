     1                                  ; Program Name: "". This program demonstrates.  Copyright (C) 2025  Dianella Sy
     2                                  
     3                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  
     4                                  ; version 3 as published by the Free Software Foundation.                                                                    
     5                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         
     6                                  ; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.      
     7                                  ; A copy of the GNU General Public License v3 is available here: <https://www.gnu.org/licenses/>.
     8                                  
     9                                  ; Author Information:
    10                                  ; Name:
    11                                  ; CWID:
    12                                  ; Section: CPSC 240-#
    13                                  ; Email: @csu.fullerton.edu
    14                                  
    15                                  ; Program Information:
    16                                  ; Name:
    17                                  ; Languages:
    18                                  ; Start Date:
    19                                  ; Completion Date:
    20                                  
    21                                  ; Program's Purpose:
    22                                  ; The "" will teach.
    23                                  
    24                                  ; Project Information:
    25                                  ; Files: 
    26                                  ; Developing Computer: 
    27                                  ; Status:
    28                                  
    29                                  ; Translator Information:
    30                                  ; Linux:
    31                                  
    32                                  
    33                                  ; Declaration Section
    34                                  %include "math.inc" ; Contains macros
     1                              <1> ; This is an include file for the program Midterm Programming Exam Review
     2                              <1> 
     3                              <1> ; Macro computes the area of a right triangle using float numbers
     4                              <1> %macro area_of_a_triangle 3
     5                              <1>    ; %1 = length of side 1 as qword float
     6                              <1>    ; %2 = length of side 2 as qword float
     7                              <1>    ; %3 = computed area
     8                              <1>    movsd xmm13, %1
     9                              <1>    mulsd xmm13, %2
    10                              <1>    mov rbx, 2
    11                              <1>    cvtsi2sd xmm14, rbx
    12                              <1>    divsd xmm13, xmm14
    13                              <1>    movsd %3, xmm13
    14                              <1> %endmacro
    15                              <1> 
    16                              <1> 
    17                              <1> ; Macro computes the third angle of a right trangle
    18                              <1> %macro third_angle 3
    19                              <1>    ; %1 = 180.0
    20                              <1>    ; %2 = first angle of the triangle
    21                              <1>    ; %3 = second angle of the triangle
    22                              <1>    movsd xmm15, %1
    23                              <1>    subsd xmm15, %2
    24                              <1>    subsd xmm15, %3
    25                              <1>    movsd %1, xmm15
    26                              <1> %endmacro
    27                              <1> 
    28                              <1> 
    29                              <1> ; Macro backs up all registers except GPRs to an array specified in parameter %1
    30                              <1> %macro backup_components 1
    31                              <1>    mov rax, 7
    32                              <1>    mov rdx, 0
    33                              <1>    xsave [%1]
    34                              <1> %endmacro
    35                              <1> 
    36                              <1> 
    37                              <1> ; Macro that backs up all the GPRs
    38                              <1> %macro create_activation_record 0    
    39                              <1>    push rbp
    40                              <1>    mov rbp, rsp
    41                              <1>    push rbx
    42                              <1>    push rcx
    43                              <1>    push rdx
    44                              <1>    push rdi
    45                              <1>    push rsi
    46                              <1>    push r8
    47                              <1>    push r9
    48                              <1>    push r10
    49                              <1>    push r11
    50                              <1>    push r12
    51                              <1>    push r13
    52                              <1>    push r14
    53                              <1>    push r15
    54                              <1>    pushf
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> 
    58                              <1> ; Macro restore_components
    59                              <1> %macro restore_components 1
    60                              <1>    mov rax, 7
    61                              <1>    mov rdx, 0
    62                              <1>    xrstor [%1]
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> 
    66                              <1> ; Macro that deletes activation record 
    67                              <1> %macro delete_activation_record 0
    68                              <1> popf
    69                              <1> pop r15
    70                              <1> pop r14
    71                              <1> pop r13
    72                              <1> pop r12
    73                              <1> pop r11
    74                              <1> pop r10
    75                              <1> pop r9
    76                              <1> pop r8
    77                              <1> pop rsi
    78                              <1> pop rdi
    79                              <1> pop rdx
    80                              <1> pop rcx
    81                              <1> pop rbx
    82                              <1> pop rbp
    83                              <1> %endmacro
    35                                  extern scanf
    36                                  extern printf
    37                                  global midterm_programming_exam_review
    38                                  
    39                                  
    40                                  ; segment .data is where initalized data is declared
    41                                  segment .data
    42                                  
    43                                  
    44                                  ; New line and float
    45 00000000 0A00                    new_line db 10, 0
    46 00000002 256C6600                double_float db "%lf", 0
    47                                  
    48                                  
    49                                  ; Area of the triangle
    50 00000006 456E74657220746865-     prompt_side_one db "Enter the length of the first side of the triangle as a floating point number: ", 0
    50 0000000F 206C656E677468206F-
    50 00000018 662074686520666972-
    50 00000021 73742073696465206F-
    50 0000002A 662074686520747269-
    50 00000033 616E676C6520617320-
    50 0000003C 6120666C6F6174696E-
    50 00000045 6720706F696E74206E-
    50 0000004E 756D6265723A2000   
    51 00000056 456E74657220746865-     prompt_side_two db "Enter the length of the second side of the triangle as a floating point number: ", 0
    51 0000005F 206C656E677468206F-
    51 00000068 662074686520736563-
    51 00000071 6F6E64207369646520-
    51 0000007A 6F6620746865207472-
    51 00000083 69616E676C65206173-
    51 0000008C 206120666C6F617469-
    51 00000095 6E6720706F696E7420-
    51 0000009E 6E756D6265723A2000 
    52 000000A7 5468616E6B20796F75-     confirm_sides db "Thank you. You entered two sides: %1.5lf and %1.5lf.", 10, 0
    52 000000B0 2E20596F7520656E74-
    52 000000B9 657265642074776F20-
    52 000000C2 73696465733A202531-
    52 000000CB 2E356C6620616E6420-
    52 000000D4 25312E356C662E0A00 
    53 000000DD 546865206172656120-     area_of_triangle db "The area of the triangle via the macro is %lf", 10, 0
    53 000000E6 6F6620746865207472-
    53 000000EF 69616E676C65207669-
    53 000000F8 6120746865206D6163-
    53 00000101 726F20697320256C66-
    53 0000010A 0A00               
    54                                  
    55                                  
    56                                  ; Third angle of the triangle
    57 0000010C 000000000080664000-     one_hundred_eighty dq 180.0, 0
    57 00000115 00000000000000     
    58 0000011C 456E74657220746865-     prompt_angle_one db "Enter the first angle as a floating point number: ", 0
    58 00000125 20666972737420616E-
    58 0000012E 676C65206173206120-
    58 00000137 666C6F6174696E6720-
    58 00000140 706F696E74206E756D-
    58 00000149 6265723A2000       
    59 0000014F 456E74657220746865-     prompt_angle_two db "Enter the second angle as a floating point number: ", 0
    59 00000158 207365636F6E642061-
    59 00000161 6E676C652061732061-
    59 0000016A 20666C6F6174696E67-
    59 00000173 20706F696E74206E75-
    59 0000017C 6D6265723A2000     
    60 00000183 5468616E6B20796F75-     confirm_angles db "Thank you. You entered two angles: %1.10lf and %1.10lf.", 10, 0
    60 0000018C 2E20596F7520656E74-
    60 00000195 657265642074776F20-
    60 0000019E 616E676C65733A2025-
    60 000001A7 312E31306C6620616E-
    60 000001B0 642025312E31306C66-
    60 000001B9 2E0A00             
    61 000001BC 546865207468697264-     third_angle_message db "The third angle via the macro is %lf", 10, 0
    61 000001C5 20616E676C65207669-
    61 000001CE 6120746865206D6163-
    61 000001D7 726F20697320256C66-
    61 000001E0 0A00               
    62                                  
    63                                  
    64                                  ; Flip one bit
    65 000001E2 54686520696E746567-     integer db "The integer in r12 is %ld", 10, 0
    65 000001EB 657220696E20723132-
    65 000001F4 20697320256C640A00 
    66                                  
    67                                  
    68                                  
    69                                  
    70                                  
    71                                  ; segment .bss is where uninitialized data is declared 
    72                                  segment .bss
    73                                  align 64               ; 64-byte alignment is necessary for xsav and xrstor to operate
    74 00000000 <res 340h>              mainstorage resb 832
    75                                  
    76                                  
    77                                  
    78                                  
    79                                  
    80                                  ; segment .text is the code 
    81                                  segment .text
    82                                  
    83                                  midterm_programming_exam_review:
    84                                  
    85                                  ; Macro backs up the GPRs
    86                                  create_activation_record
    39 00000000 55                  <1>  push rbp
    40 00000001 4889E5              <1>  mov rbp, rsp
    41 00000004 53                  <1>  push rbx
    42 00000005 51                  <1>  push rcx
    43 00000006 52                  <1>  push rdx
    44 00000007 57                  <1>  push rdi
    45 00000008 56                  <1>  push rsi
    46 00000009 4150                <1>  push r8
    47 0000000B 4151                <1>  push r9
    48 0000000D 4152                <1>  push r10
    49 0000000F 4153                <1>  push r11
    50 00000011 4154                <1>  push r12
    51 00000013 4155                <1>  push r13
    52 00000015 4156                <1>  push r14
    53 00000017 4157                <1>  push r15
    54 00000019 9C                  <1>  pushf
    87                                  
    88                                  ; Macro to backup the 3 state components including xmms
    89                                  backup_components mainstorage	; Backup all 3 components
    31 0000001A B807000000          <1>  mov rax, 7
    32 0000001F BA00000000          <1>  mov rdx, 0
    33 00000024 0FAE2425[00000000]  <1>  xsave [%1]
    90                                  
    91                                  
    92                                  ; Output a newline
    93 0000002C B800000000              mov  rax, 0
    94 00000031 48BF-                   mov  rdi, new_line
    94 00000033 [0000000000000000] 
    95 0000003B E8(00000000)            call printf
    96                                  
    97                                  
    98                                  ; ---------- GROUP 1 ----------
    99                                  ; Prompt the user to input the length of the first side of the triangle as a floating point number
   100 00000040 B800000000              mov  rax, 0
   101 00000045 48BF-                   mov  rdi, prompt_side_one
   101 00000047 [0600000000000000] 
   102 0000004F E8(00000000)            call printf
   103                                  
   104                                  
   105                                  ; Input the length of the first side of the triangle
   106 00000054 B801000000              mov rax, 1
   107 00000059 48BF-                   mov rdi, double_float
   107 0000005B [0200000000000000] 
   108 00000063 4889E6                  mov rsi, rsp 
   109 00000066 E8(00000000)            call scanf
   110 0000006B F2440F101424            movsd xmm10, [rsp]
   111                                  
   112                                  
   113                                  ; Prompt the user to input the length of the second side of the triangle as a floating point numbers
   114 00000071 B800000000              mov  rax, 0
   115 00000076 48BF-                   mov  rdi, prompt_side_two
   115 00000078 [5600000000000000] 
   116 00000080 E8(00000000)            call printf
   117                                  
   118                                  
   119                                  ; Input the length of the second side of the triangle
   120 00000085 B800000000              mov   rax, 0
   121 0000008A 48BF-                   mov   rdi, double_float
   121 0000008C [0200000000000000] 
   122 00000094 4889E6                  mov   rsi, rsp 
   123 00000097 E8(00000000)            call  scanf
   124 0000009C F2440F101C24            movsd xmm11, [rsp]
   125                                  
   126                                  
   127                                  ; Output the length of the two sides of the triangle the user inputted
   128 000000A2 B802000000              mov rax, 2
   129 000000A7 48BF-                   mov rdi, confirm_sides
   129 000000A9 [A700000000000000] 
   130 000000B1 F2410F10C2              movsd xmm0, xmm10
   131 000000B6 F2410F10CB              movsd xmm1, xmm11
   132 000000BB E8(00000000)            call printf
   133                                  
   134                                  
   135                                  ; Call macro to do the computation of area of the triangle
   136                                  ; xmm10 = length of side1
   137                                  ; xmm11 = length of side2
   138                                  ; xmm12 = register that will receive the computed area from the macro
   139                                  area_of_a_triangle xmm10, xmm11, xmm12
     5                              <1> 
     6                              <1> 
     7                              <1> 
     8 000000C0 F2450F10EA          <1>  movsd xmm13, %1
     9 000000C5 F2450F59EB          <1>  mulsd xmm13, %2
    10 000000CA BB02000000          <1>  mov rbx, 2
    11 000000CF F24C0F2AF3          <1>  cvtsi2sd xmm14, rbx
    12 000000D4 F2450F5EEE          <1>  divsd xmm13, xmm14
    13 000000D9 F2450F10E5          <1>  movsd %3, xmm13
   140                                  
   141                                  
   142                                  ; Output the value in xmm12 as verification that the macro <area_of_a_triangle> really performs correctly
   143 000000DE B801000000              mov rax, 1
   144 000000E3 48BF-                   mov rdi, area_of_triangle
   144 000000E5 [DD00000000000000] 
   145 000000ED F2410F10C4              movsd xmm0, xmm12
   146 000000F2 E8(00000000)            call printf
   147                                  
   148                                  
   149                                  ; Output a newline
   150 000000F7 B800000000              mov  rax, 0
   151 000000FC 48BF-                   mov  rdi, new_line
   151 000000FE [0000000000000000] 
   152 00000106 E8(00000000)            call printf
   153                                  
   154                                  
   155                                  
   156                                  ; ---------- GROUP 2 ----------
   157                                  ; Prompt the user to input the first angle of the triangle
   158 0000010B B800000000              mov rax, 0
   159 00000110 48BF-                   mov rdi, prompt_angle_one
   159 00000112 [1C01000000000000] 
   160 0000011A E8(00000000)            call printf
   161                                  
   162                                  ; Input the first angle of the triangle
   163 0000011F B801000000              mov rax, 1
   164 00000124 48BF-                   mov rdi, double_float
   164 00000126 [0200000000000000] 
   165 0000012E 4889E6                  mov rsi, rsp 
   166 00000131 E8(00000000)            call scanf
   167 00000136 F2440F100C24            movsd xmm9, [rsp]
   168                                  
   169                                  
   170                                  ; Prompt the user to input the second angle of the triangle
   171 0000013C B800000000              mov rax, 0
   172 00000141 48BF-                   mov rdi, prompt_angle_two
   172 00000143 [4F01000000000000] 
   173 0000014B E8(00000000)            call printf
   174                                  
   175                                  ; Input the second angle of the triangle
   176 00000150 B800000000              mov rax, 0
   177 00000155 48BF-                   mov rdi, double_float
   177 00000157 [0200000000000000] 
   178 0000015F 4889E6                  mov rsi, rsp 
   179 00000162 E8(00000000)            call scanf
   180 00000167 F2440F100424            movsd xmm8, [rsp]
   181                                  
   182                                  
   183                                  ; Output the two angles of the triangle the user inputted
   184 0000016D B802000000              mov rax, 2
   185 00000172 48BF-                   mov rdi, confirm_angles
   185 00000174 [8301000000000000] 
   186 0000017C F2410F10C1              movsd xmm0, xmm9
   187 00000181 F2410F10C8              movsd xmm1, xmm8
   188 00000186 E8(00000000)            call printf
   189                                  
   190                                  
   191                                  ; Move 180.0 to xmm7
   192 0000018B F20F103C25-             movsd xmm7, qword [one_hundred_eighty]
   192 00000190 [0C010000]         
   193                                  
   194                                  
   195                                  
   196                                  ; Call macro to find the third angle of the triangle
   197                                  ; xmm7 = 180.0
   198                                  ; xmm9 = first angle
   199                                  ; xmm8 = second angle
   200                                  third_angle xmm7, xmm9, xmm8
    19                              <1> 
    20                              <1> 
    21                              <1> 
    22 00000194 F2440F10FF          <1>  movsd xmm15, %1
    23 00000199 F2450F5CF9          <1>  subsd xmm15, %2
    24 0000019E F2450F5CF8          <1>  subsd xmm15, %3
    25 000001A3 F2410F10FF          <1>  movsd %1, xmm15
   201                                  
   202                                  
   203                                  ; Output the value in xmm7 as verification that the macro <third_angle> really performs correctly
   204 000001A8 B801000000              mov rax, 1
   205 000001AD 48BF-                   mov rdi, third_angle_message
   205 000001AF [BC01000000000000] 
   206 000001B7 F20F10C7                movsd xmm0, xmm7
   207 000001BB E8(00000000)            call printf
   208                                  
   209                                  
   210                                  
   211                                  ; ---------- GROUP 3 ----------
   212                                  ; Output a newline
   213 000001C0 B800000000              mov  rax, 0
   214 000001C5 48BF-                   mov  rdi, new_line
   214 000001C7 [0000000000000000] 
   215 000001CF E8(00000000)            call printf
   216                                  
   217                                  
   218                                  ; Set 5 equal to r12, which equals 00000000.....0000101
   219 000001D4 41BC05000000            mov r12, 5
   220                                  
   221                                  
   222                                  
   223                                  ; Print "The integer in r12 is 5"
   224 000001DA B800000000              mov rax, 0
   225 000001DF 48BF-                   mov rdi, integer
   225 000001E1 [E201000000000000] 
   226 000001E9 4C89E6                  mov rsi, r12
   227 000001EC E8(00000000)            call printf
   228                                  
   229                                  
   230                                  
   231                                  ; In the next lines of code, We are going to make the 1 in the third position from the right perform a flip 1 to 0!
   232                                  
   233                                  
   234                                  ; Set 4 equal to rbx, which equals 00000000.....0000000100 (single 1 in position 3)
   235 000001F1 BB04000000              mov rbx, 4
   236                                  
   237                                  
   238                                  ; Flip the third bit from the right, so r12 changes to 00000000.....000001   
   239 000001F6 4931DC                  xor r12, rbx
   240                                  
   241                                  
   242                                  ; Print "The integer in r12 is 1"
   243 000001F9 B800000000              mov rax, 0 
   244 000001FE 48BF-                   mov rdi, integer
   244 00000200 [E201000000000000] 
   245 00000208 4C89E6                  mov rsi, r12
   246 0000020B E8(00000000)            call printf
   247                                  
   248                                  
   249                                  ; Move the area of the triangle to the rsp (register stack pointer)
   250 00000210 F2440F112424            movsd [rsp], xmm12
   251                                  
   252                                  
   253                                  ; Restore state component values by activating a macro
   254                                  restore_components mainstorage      ; Reverses the action of a former macro
    60 00000216 B807000000          <1>  mov rax, 7
    61 0000021B BA00000000          <1>  mov rdx, 0
    62 00000220 0FAE2C25[00000000]  <1>  xrstor [%1]
   255                                  
   256                                  
   257                                  ; Send the area of the triangle to the driver, main.cpp
   258 00000228 F20F100424              movsd xmm0, [rsp]
   259                                  
   260                                  
   261                                  ; Restore original values to general registers
   262                                  delete_activation_record    
    68 0000022D 9D                  <1> popf
    69 0000022E 415F                <1> pop r15
    70 00000230 415E                <1> pop r14
    71 00000232 415D                <1> pop r13
    72 00000234 415C                <1> pop r12
    73 00000236 415B                <1> pop r11
    74 00000238 415A                <1> pop r10
    75 0000023A 4159                <1> pop r9
    76 0000023C 4158                <1> pop r8
    77 0000023E 5E                  <1> pop rsi
    78 0000023F 5F                  <1> pop rdi
    79 00000240 5A                  <1> pop rdx
    80 00000241 59                  <1> pop rcx
    81 00000242 5B                  <1> pop rbx
    82 00000243 5D                  <1> pop rbp
   263                                  
   264 00000244 C3                      ret
